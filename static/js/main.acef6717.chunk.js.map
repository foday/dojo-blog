{"version":3,"sources":["Navbar.js","BlogList.js","useFetch.js","Home.js","create.js","BlogDetails.js","Page404.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","style","color","backgroundColor","borderRadius","BlogList","blogs","title","map","blog","id","author","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","Home","Create","setTitle","body","setBody","setAuthor","history","useHistory","onSubmit","e","preventDefault","method","headers","JSON","stringify","push","type","required","value","onChange","target","BlogDetails","useParams","onClick","Page404","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acef6717.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <nav className=\"navbar\">\r\n            <h1>The Dojo Blog</h1>\r\n            <div className=\"links\">\r\n                <Link to=\"/\">Home</Link>\r\n               <Link to ='/create' style={{\r\n                   color: \"white\",\r\n                   backgroundColor: \"#f1356d\",\r\n                   borderRadius: '8px'\r\n               }}>New Blog</Link>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import { Link } from \"react-router-dom\";\r\n\r\nconst BlogList = ({ blogs, title}) => {\r\n    return (\r\n        <div className=\"blog-list\">\r\n        <h2> { title }</h2>\r\n        {blogs.map((blog) => (\r\n            <div className=\"blog-preview\" key={blog.id}> \r\n            <Link to={'/blogs/'+blog.id}>\r\n                <h2>{blog.title}</h2>\r\n                <p>written by {blog.author}</p>\r\n            </Link>\r\n                \r\n            </div>\r\n        ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlogListimport { useEffect, useState} from 'react';\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n    const [error, setError] = useState(null); \r\n\r\n    // useEffect hook\r\n\r\n    useEffect(() => {\r\n        const abortCont = new AbortController();\r\n\r\nsetTimeout(() => {\r\n    fetch(url, { signal: abortCont.signal })\r\n    .then(res => {\r\n        if(!res.ok){\r\n            throw Error('Could not fetch the data for the resource')\r\n        }\r\n        return res.json();\r\n    })\r\n    .then(data => {\r\n        setData(data);\r\n        setIsPending(false);\r\n        setError(null);\r\n    })\r\n    .catch(err => {\r\n        if (err.name === 'AbortError') {\r\n            console.log('fetch aborted');\r\n        } else {\r\n            setIsPending(false);\r\n        setError(err.message);\r\n        }\r\n    })\r\n}, 1000);\r\n\r\nreturn () => abortCont.abort();\r\n    }, [url]);\r\n\r\nreturn { data, isPending, error }\r\n}\r\n\r\nexport default useFetch;","import BlogList from './BlogList';\r\nimport useFetch from './useFetch';\r\n\r\nconst Home = () => {\r\n    const { data: blogs, isPending, error} = useFetch('http://localhost:8000/blogs');\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            { error && <div>{error }</div>}\r\n            {isPending && <div>Loading...</div>}\r\n           { blogs && <BlogList blogs={blogs} title=\"All blogs\"/>} \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Home;\r\n","import { useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Create = () => {\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [author, setAuthor] = useState('mario ');\r\n    const [isPending, setIsPending] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const blog = { title, body, author };\r\n\r\n        fetch(\"http://localhost:8000/blogs\", {\r\n            method: \"POST\", \r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(blog)\r\n        }).then(() => {\r\n            console.log('new blog added');\r\n            setIsPending(false);\r\n            history.push('/');\r\n        })\r\n        \r\n    }\r\n\r\n    return ( \r\n        <div className=\"create\">\r\n        <h2>Add a new blog</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <label>Blog title: </label>\r\n            <input \r\n            type=\"text\"\r\n            required \r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n\r\n            <label>Blog body: </label>\r\n            <textarea\r\n                required\r\n                value={body}\r\n                onChange={(e) => setBody(e.target.value)}    \r\n            ></textarea> \r\n            <label>Blog author: </label>\r\n            <select \r\n                value={author}\r\n                onChange={(e) => setAuthor(e.target.value)}\r\n            >\r\n                <option value=\"Mario\">mario</option>\r\n                <option value=\"Luigi\">Luigi</option>\r\n            </select>\r\n            <button>Add Blog</button>\r\n           \r\n        </form>\r\n        </div>\r\n     );\r\n};\r\n \r\nexport default Create;","import { useHistory, useParams } from \"react-router-dom\";\r\nimport useFetch from './useFetch';\r\n\r\n\r\nconst BlogDetails = () => {\r\n    const {id} = useParams();\r\n    const { data: blog, error, isPending } = useFetch('http://localhost:8000/blogs/'+id);\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        fetch('http://localhost:8000/blogs/' + blog.id, {\r\n            method: 'DELETE'\r\n        }).then(() => {\r\n            history.push('/');\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"blog-details\">\r\n            { isPending && <div>Loading...</div> }\r\n            { error && <div>{error}</div>}\r\n            { blog && (\r\n                <article>\r\n                    <h2>{blog.title}</h2>\r\n                    <p>Written by {blog.author}</p>\r\n                    <div>{blog.body}</div>\r\n                    <button onClick={handleClick}>delete</button>\r\n                </article>\r\n            )}\r\n            <h2>Blog Details - { id }</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlogDetails;","import { Link } from \"react-router-dom\"\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div className=\"not-found\">\r\n            <h2>Sorry: 404 Error</h2>\r\n            <p>That page cannot be found </p>\r\n            <Link to=\"/\">Back to the homepage..</Link>\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default Page404;","import Navbar from './Navbar';\nimport Home from './Home';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Create from './create';\nimport BlogDetails from './BlogDetails';\nimport Page404 from './Page404';\n\nfunction App() {\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"content\">\n        <Switch>\n          <Route exact path=\"/\"> \n            <Home />\n          </Route>\n          <Route path=\"/create\"> \n            <Create />\n          </Route>\n          <Route path=\"/blogs/:id\">\n            <BlogDetails />\n          </Route>\n          <Route path=\"*\">\n            <Page404 />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}